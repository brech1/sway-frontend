/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type DepositInput = {
  id: BigNumberish;
  amount: BigNumberish;
  owner: IdentityInput;
  isValid: boolean;
};

export type DepositOutput = {
  id: BN;
  amount: BN;
  owner: IdentityOutput;
  isValid: boolean;
};

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface ContractAbiInterface extends Interface {
  functions: {
    deposit: FunctionFragment;
    withdraw: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "withdraw",
    data: BytesLike
  ): DecodedValue;
}

export class ContractAbi extends Contract {
  interface: ContractAbiInterface;
  functions: {
    deposit: InvokeFunction<[], DepositOutput>;

    withdraw: InvokeFunction<[depositId: BigNumberish], DepositOutput>;
  };
}
